// A scala script which generates hard problems for higher order theorem provers
// Formulas:
//   f1,f2       ... if-then-else axiomatizations
//   f3,f4       ... properties of the successor function (0 is no successor and
//                     a number is always different from its successor)
//   conclusion0 ... there exists a function h s.t. h(0) = 1, h(1) = 0
//   conclusion1 ... there exists a function h s.t. h(0) = 1, h(1) = 0, h(2) = 0
//   conclusion2 ... there exists a function h s.t. h(0) = 1, h(1) = 0, h(2) = 1
//   w1          ... witness for sc
//   w2          ... witness for sc2

import java.io._

object exportTHF {
  def apply( ls: List[HOLSequent], filename: String, positive: Boolean = false ) = {
    val file = new BufferedWriter( new FileWriter( filename ) )
    file.write( TPTPHOLExporter( ls, positive ) )
    file.close
  }
}

val decl = """var X:o; var U,V:i; var H:i>i; var x,y:i;
              const zero:i; const s:i>i;  const h:i>i;
              const ite : o > (i > (i>i));"""
val s1 = "(all X all U all V (X -> ite(X,U,V) = U))"
val s2 = "(all X all U all V (-X -> ite(X,U,V) = V))"
val s3 = "(all x -(s(x) = zero))"
val s4 = "(all x -(s(x) = x))"
val s5 = "(all x (h(x) = ite((x=zero), s(zero), zero) ))"
val s6 = "(all x (h(x) = ite((x=s(zero)), zero, s(zero)) ))"
val s7 = """(all x (h(x) = ite((x=zero), s(zero),
                            ite((x=s(zero)), zero, s(zero)  ))))"""

val sc = "(exists H (H(zero)=s(zero) & H(s(zero))=zero ))"
val sc1 = "(exists H (H(zero)=s(zero) & H(s(zero))=zero & H(s(s(zero))) = zero))"
val sc2 = "(exists H (H(zero)=s(zero) & H(s(zero))=zero & H(s(s(zero))) = s(zero)))"

val List(f1,f2,f3,f4,w1,w2,w3,conclusion0,conclusion1,conclusion2) =
    List(s1,s2,s3,s4,s5,s6,s7,sc,sc1,sc2).map(str => HLKHOLParser.parseFormula(decl+str))

val s0a = FSequent(f1::f2::Nil,     conclusion0::Nil)
val s0b = FSequent(f1::f2::w1::Nil, conclusion0::Nil)

val s1a = FSequent(f1::f2::Nil,         conclusion1::Nil)
val s1b = FSequent(f1::f2::w1::Nil,     conclusion1::Nil)
val s1c = FSequent(f1::f2::f3::f4::w1::Nil, conclusion1::Nil)
val s1d = FSequent(f1::f2::f3::f4::Nil,     conclusion1::Nil)

val s2b = FSequent(f1::f2::f4::w2::Nil,     conclusion2::Nil)
val s2c = FSequent(f1::f2::f4::Nil,         conclusion2::Nil)
val s2d = FSequent(f1::f2::w3::Nil,         conclusion2::Nil)
val s2e = FSequent(f1::f2::f3::f4::w3::Nil, conclusion2::Nil)

val consistent = FSequent(f1::f2::f3::f4::w1::conclusion0::Nil, Nil)

val cuts0a = FSequent(f1::f2::f3::f4::Nil, w1::Nil)
val cuts0b = FSequent(f3::f4::w1::Nil, conclusion0::Nil)

val fn = "ite-export-"

//sc
exportTHF(List(s0a), fn+"0-minimal.tptp", true)           //provable by agsyhol
exportTHF(List(s0b), fn+"0-with-witness.tptp", true)      //provable by agsyhol
//sc1
exportTHF(List(s1a), fn+"1-minimal.tptp", true)           //timeout
exportTHF(List(s1b), fn+"1-withness-no-arith.tptp", true) //timeout
exportTHF(List(s1c), fn+"1-with-witness.tptp", true)      //provable by leo 2, satallax, agsyhol
exportTHF(List(s1d), fn+"1-without-witness.tptp", true)   //timeout
//sc2
exportTHF(List(s2b), fn+"2-with-witness.tptp", true)      //provable by leo 2, satallax
exportTHF(List(s2c), fn+"2-without-witness.tptp", true)   //timeout
exportTHF(List(s2d), fn+"2-with-witness2.tptp", true)     //provable by leo 2, satallax
exportTHF(List(s2e), fn+"2-with-witness2-help.tptp", true) //provable by leo 2, satallax
//fol version
exportTHF(List(cuts0a), "ite-export-0-cut1.tptp", true)
exportTHF(List(cuts0b), "ite-export-0-cut2.tptp", true)
exportTHF(List(consistent), "ite-export-0-consistent.tptp", true)
